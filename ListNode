#include<iostream>
#include<stack>
using namespace std;
//struct ListNode {
//	int  m_nValue;
//	ListNode * m_pNext;
//};
///*
//	Sword to Offer 2.3.3
//	ListNode
//*/
///*
//	Add a Node to the end of the ListNode
//*/
//void AddToTail(ListNode **pHead,int value) {
//	ListNode *pNew = new ListNode();
//	pNew->m_nValue = value;
//	pNew->m_pNext = NULL;
//	if (*pHead == NULL) {
//		*pHead = pNew;
//	}
//	else {
//		ListNode *pNode = *pHead;
//		while (pNode->m_pNext != NULL) {
//			pNode = pNode->m_pNext;
//		}
//		pNode = pNew;
//	}
//
//}
///*
//	find the first Node with paticular value in the ListNode and delete it
//	2.3.3 p50
//*/
//void RemoveNode(ListNode **pHead, int value) {
//	if (pHead == NULL || *pHead == NULL)
//		return;
//	ListNode * pToBeDeleted = NULL;
//	if ((*pHead)->m_nValue == value) {
//		pToBeDeleted = *pHead;
//		*pHead = (*pHead)->m_pNext;
//	}
//	else {
//		ListNode *pNode = *pHead;
//		while (pNode->m_pNext != NULL&& pNode->m_pNext->m_nValue == value) {
//			pToBeDeleted = pNode->m_pNext;
//			pNode->m_pNext = pNode->m_pNext->m_pNext;
//		}
//	}
//	if (pToBeDeleted != NULL) {
//		delete pToBeDeleted;
//		pToBeDeleted = NULL;
//	}
//}

struct ListNode
{
	int m_nKey;
	ListNode * m_pNext;
};

/*
	5. P51 
	print the Node value from the end to the begin of the ListNode
*/
void PrintListReversingly_Iteratively(ListNode * pHead) {
	std::stack<ListNode*> nodes;
	ListNode* pNode = pHead;
	while (pNode != NULL) {
		nodes.push(pNode);
		pNode = pNode->m_pNext;
	}
	while (!nodes.empty()) {
		pNode = nodes.top();
		cout << pNode->m_nKey<<endl;
		nodes.pop();
	}
}
void PrintListReversingly_Recursively(ListNode * pHead) {
	if (pHead != NULL) {
		if (pHead->m_pNext != NULL) {
			PrintListReversingly_Recursively(pHead->m_pNext);
		}
		cout << pHead->m_nKey << endl;
	}
}
void PrintList(ListNode *pHead) {
	ListNode *pNode = pHead;
	while (pNode != NULL) {
		cout << pNode->m_nKey << endl;
		pNode = pNode->m_pNext;
	}
}
//P 109
ListNode * FindKthToTail(ListNode * pListHead, unsigned int k) {
	if (pListHead == NULL && k == 0) {
		return NULL;
	}
	ListNode *pAhead = pListHead;
	ListNode *pBehind = NULL;
	
	for (unsigned int i = 0; i < k - 1; i++) {
		if (pAhead->m_pNext != NULL) {
			pAhead = pAhead->m_pNext;
		}
		else {
			return NULL;
		}
	}

	pBehind = pListHead;
	while (pAhead->m_pNext!=NULL) {
		pAhead = pAhead->m_pNext;
		pBehind = pBehind->m_pNext;
	}
	return pBehind;

}
// P.112 
ListNode *ReverseList(ListNode *pHead) {
	ListNode* pReverseHead = NULL;// the Head Node of the reverse List;
	ListNode* pNode = pHead;// the current visit Node of the List
	ListNode* pPre = NULL;// the previous node before the current visit Node
	while (pNode != NULL) {
		ListNode *pNext = pNode->m_pNext;
		if (pNext == NULL) pReverseHead = pNode;
		pNode->m_pNext = pPre;   // reverse 

		pPre = pNode;// push forward
		pNode = pNext;
	}
	return pReverseHead;
}

void main() {
	//static ListNode inialize
	ListNode a, b, c,d, *phead, *p;
	phead = &a;
	a.m_nKey = 1; a.m_pNext = &b;
	b.m_nKey = 2; b.m_pNext = &c;
	c.m_nKey = 3; c.m_pNext = &d;
	d.m_nKey = 4; d.m_pNext = NULL;
	/*p = phead;
	do {
		cout << " number=" << p->m_nKey << endl;
		p = p->m_pNext;
	} while (p != NULL);*/
	cout << "PrintList:" << endl;
	PrintList(phead);
	cout << endl << "PrintListReversingly_Iteratively" << endl;
	PrintListReversingly_Iteratively(phead);
	cout << endl << "PrintListReversingly_Recursively" << endl;
	PrintListReversingly_Recursively(phead);
	cout << endl << "FindKthToTail" << endl;
	ListNode *cur = FindKthToTail(phead, 2);
	cout << cur->m_nKey << endl;
	cout <<endl<< "Reverse the List and call the function ReverseList()" << endl;
	ListNode *pReverseHead = ReverseList(phead);
	cout <<endl<< "After reverse the List PrintList:" << endl;
	PrintList(pReverseHead);
}
