/*******************************************************************
Copyright(c) 2016, Harry He
All rights reserved.

Distributed under the BSD license.
(See accompanying file LICENSE.txt at
https://github.com/zhedahht/CodingInterviewChinese2/blob/master/LICENSE.txt)
*******************************************************************/

//==================================================================
// 《剑指Offer——名企面试官精讲典型编程题》代码
// 作者：何海涛
//==================================================================

// 面试题43：从1到n整数中1出现的次数
// 题目：输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数。例如
// 输入12，从1到12这些整数中包含1 的数字有1，10，11和12，1一共出现了5次。

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include<iostream>
using namespace std;
// ====================方法一====================
int NumberOf1(unsigned int n);

int NumberOf1Between1AndN_Solution1(unsigned int n)
{
	int number = 0;
	if (n < 1) return 0;
	for (unsigned int i = 1; i <=n; i++) {
		number = number + NumberOf1(i);
	}
	return number;
}

int NumberOf1(unsigned int n)
{
	int number = 0;
	while (n) {
		if (n % 10 == 1) number++;
		n /= 10;
	}
	return number;
}

// ====================方法二====================
int NumberOf1(const char* strN);
int PowerBase10(unsigned int n);

int NumberOf1Between1AndN_Solution2(int n)
{
	int number = 0;
	if (n < 1) return 0;
	char array[50];
	 _itoa_s(n, array, 10);
	 //itoa()函数有3个参数：
	 //第一个参数是要转换的数字，第二个参数是要写入转换结果的目标字符串，第三个参数是转移数字时所用 的基数。
	 //转换基数为10。10：十进制；2：二进制...
	return NumberOf1(array);
	//char strN[50];
	//sprintf(strN, "%d", n);
	//return NumberOf1(strN);
}

int NumberOf1(const char* strN)
{
	if (!strN || *strN<'0' || *strN>'9' || *strN == '\0')
		return 0;
	int first = *strN - '0'; // 最高位是1
	unsigned int length = static_cast<unsigned int>(strlen(strN));
	if (length == 1 && first == 0) return 0;
	if (length == 1 && first == 1) return 1;
	// 假设strN是"21345"
	// numFirstDigit是数字10000-19999的第一个位中1的数目,即1出现在最高位的情况
	int numFirstDigit = 0;
	if(first>1)//即原来的strN最高位大于1
	numFirstDigit = PowerBase10(length - 1);
	else if (first == 1) {
		numFirstDigit = atoi(strN + 1) + 1;//从次高位开始的全排列个数，strN+1
	}
	// numOtherDigits是01346-21345除了第一位之外的数位中1的数目，详解见书
	int numOtherDigits = first*(length - 1) *PowerBase10(length - 2);
	// numRecursive是1-1345中1的数目
	int numRecursive = NumberOf1(strN + 1);// 递归调用
	return numFirstDigit + numOtherDigits + numRecursive;
}
// return 10^n
int PowerBase10(unsigned int n)
{
	int result = 1;
	for (unsigned int i = 0; i < n; ++i)
		result *= 10;

	return result;
}

// ====================测试代码====================
void Test(const char* testName, int n, int expected)
{
	if (testName != nullptr)
		printf("%s begins: \n", testName);

	if (NumberOf1Between1AndN_Solution1(n) == expected)
		printf("Solution1 passed.\n");
	else
		printf("Solution1 failed.\n");

	if (NumberOf1Between1AndN_Solution2(n) == expected)
		printf("Solution2 passed.\n");
	else
		printf("Solution2 failed.\n");

	printf("\n");
}

void Test()
{
	Test("Test1", 1, 1);
	Test("Test2", 5, 1);
	Test("Test3", 10, 2);
	Test("Test4", 55, 16);
	Test("Test5", 99, 20);
	Test("Test6", 10000, 4001);
	Test("Test7", 21345, 18821);
	Test("Test8", 0, 0);
}

int main(int argc, char* argv[])
{
	Test();

	return 0;
}

