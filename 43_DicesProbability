/*******************************************************************
Copyright(c) 2016, Harry He
All rights reserved.

Distributed under the BSD license.
(See accompanying file LICENSE.txt at
https://github.com/zhedahht/CodingInterviewChinese2/blob/master/LICENSE.txt)
*******************************************************************/

//==================================================================
// 《剑指Offer——名企面试官精讲典型编程题》代码
// 作者：何海涛
//==================================================================

// 面试题60：n个骰子的点数
// 题目：把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s
// 的所有可能的值出现的概率。

#include <cstdio>
#include <math.h>
#include<iostream>
using namespace std;
int g_maxValue = 6;

// ====================方法一====================
void Probability(int number, int* pProbabilities);
void Probability(int original, int current, int sum, int* pProbabilities);

void PrintProbability_Solution1(int number)
{  
	if (number < 1) return;
	int maxsum = g_maxValue * number;
	int *pProbability = new int[maxsum - number + 1];
	for (int i = 0; i < maxsum - number + 1; i++) {
		pProbability[i] = 0;
	}
	Probability(number, pProbability);
	//error: int total = pow(double(number), g_maxValue);
	//以免成为整数除法
	int total = pow((double)g_maxValue, number);
	//cout << total << endl;
	for (int i = 0; i < maxsum - number + 1; i++) {
		//error:  double frequency = double(pProbability[i]) / double(total);
		double frequency = (double)pProbability[i]/ (double)total;
		cout << i<<": "<<frequency << endl;
	}
	
	delete [] pProbability;
	cout << "Running " << endl;
}
//模拟投掷骰子
void Probability(int number, int* pProbabilities)
{
	//error cause    HEAP_CORRUPTION_DETECTED: after Normal block(#908) at 0x399EC0. CRT detected that the application wrote to memory after end of heap buffer .
	//  for (int i = 0; i <= g_maxValue; ++i) {
	//依次模拟六种点数
	for (int i = 1; i <= g_maxValue; ++i) {
		Probability(number, number, i, pProbabilities);
	}
}

void Probability(int original, int current, int sum,	int* pProbabilities)
{
	if (current == 1)
	{
		pProbabilities[sum - original]++;
	}
	else
	{
		for (int i = 1; i <= g_maxValue; ++i)
		{
			Probability(original, current - 1, i + sum, pProbabilities);
		}
	}
}

// ====================方法二====================
/*
	用两个数组来存储骰子点数的每一个总数出现的次数。在一次循环中，第一个数组中的第n个数字表示骰子和为n
	出现的次数。在下一次循环中，我们加上一个新的骰子，此时和为n的骰子出现的次数应该等于上一次循环中骰子点数
	和为n-1,n-2,n-3,n-4,n-5与n-6的次数的总和，所以我们把另一个数组的第n个数字设为前一个数组对应的第
	n-1,n-2,n-3,n-4,n-5与n-6之和
*/
void output(int *array,int len) {
	//cout << "文件名:" << _FILE_ << "  函数名：" << _func_ << "   行数：" << _LINE_ << endl;
	for (int i = 0; i < len; i++) {
		cout << array[i] << "  ";
	}
	cout << endl;
}
void PrintProbability_Solution2(int number)
{
	if (number < 1)
		return;

	int* pProbabilities[2];
	pProbabilities[0] = new int[g_maxValue * number + 1];
	pProbabilities[1] = new int[g_maxValue * number + 1];
	for (int i = 0; i < g_maxValue * number + 1; ++i)
	{
		//初始化
		pProbabilities[0][i] = 0;
		pProbabilities[1][i] = 0;
	}

	int flag = 0;//数组交换
	for (int i = 1; i <= g_maxValue; ++i)
		pProbabilities[flag][i] = 1;//投掷第一次骰子
	//开始投掷其余的骰子
	for (int k = 2; k <= number; ++k)
	{
		cout << "pPronbabilities[0]=" << endl;
		output(pProbabilities[0], g_maxValue* number + 1);
		cout << "pPronbabilities[1]=" << endl;
		output(pProbabilities[1], g_maxValue* number + 1);

		for (int i = 0; i < k; ++i)
			pProbabilities[1 - flag][i] = 0;

		for (int i = k; i <= g_maxValue * k; ++i)
		{
			pProbabilities[1 - flag][i] = 0;
	//把另一个数组的第n个数字设为前一个数组对应的第n - 1, n - 2, n - 3, n - 4, n - 5与n - 6之和
			for (int j = 1; j <= i && j <= g_maxValue; ++j)
				pProbabilities[1 - flag][i] += pProbabilities[flag][i - j];
		}

		flag = 1 - flag;//交换骰子
	}

	double total = pow((double)g_maxValue, number);
	for (int i = number; i <= g_maxValue * number; ++i)
	{
		double ratio = (double)pProbabilities[flag][i] / total;
		printf("%d: %e\n", i, ratio);
	}

	delete[] pProbabilities[0];
	delete[] pProbabilities[1];
}

// ====================测试代码====================
void Test(int n)
{
	printf("Test for %d begins:\n", n);

	//printf("Test for solution1\n");
	//PrintProbability_Solution1(n);
	//cout << "Test for solution1 ended" << endl;
	printf("Test for solution2\n");
	PrintProbability_Solution2(n);
	cout << "Test for solution2 ended" << endl;
	printf("\n");
}

int main(int argc, char* argv[])
{
	Test(1);
	Test(2);
	Test(3);
	Test(4);

	Test(11);

	Test(0);

	return 0;
}

