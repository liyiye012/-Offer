/*******************************************************************
Copyright(c) 2016, Harry He
All rights reserved.

Distributed under the BSD license.
(See accompanying file LICENSE.txt at
https://github.com/zhedahht/CodingInterviewChinese2/blob/master/LICENSE.txt)
*******************************************************************/

//==================================================================
// 《剑指Offer——名企面试官精讲典型编程题》代码
// 作者：何海涛
//==================================================================

// 面试题54：二叉搜索树的第k个结点
// 题目：给定一棵二叉搜索树，请找出其中的第k大的结点。

#include <iostream>
#include "BinaryTree.h"
using namespace std;
const BinaryTreeNode* KthNodeCore(const BinaryTreeNode* pRoot, unsigned int& k);

const BinaryTreeNode* KthNode(const BinaryTreeNode* pRoot, unsigned int k)
{
	if (pRoot == NULL || k == 0) {
		return NULL;
	 }
	return KthNodeCore(pRoot, k);
}

const BinaryTreeNode* KthNodeCore(const BinaryTreeNode* pRoot, unsigned int& k)
{
	const BinaryTreeNode *target = NULL;
	if (pRoot->m_pLeft != NULL)
		target = KthNodeCore(pRoot->m_pLeft,k);
	if (target == NULL) {
		if (k == 1)
			target = pRoot;

			k--;	
	}
	if (target == NULL && pRoot->m_pRight != NULL)
		target = KthNodeCore(pRoot->m_pRight, k);
	return target;
}

//=========================辅助代码======================================
//void PrintFromTopToBottom(BinaryTreeNode *pTreeRoot) {
//	if (!pTreeRoot) return;
//	std::deque<BinaryTreeNode* > dequeTreeNode;
//	dequeTreeNode.push_back(pTreeRoot);
//	while (dequeTreeNode.size()>0) {
//		BinaryTreeNode *pNode = dequeTreeNode.front();
//		cout << pNode->m_nValue << endl;
//		dequeTreeNode.pop_front();
//		if (pNode->m_pLeft) dequeTreeNode.push_back(pNode->m_pLeft);
//		if (pNode->m_pRight) dequeTreeNode.push_back(pNode->m_pRight);
//	}
//}
BinaryTreeNode* CreateBinaryTreeNode(int value)
{
	BinaryTreeNode* pNode = new BinaryTreeNode();
	pNode->m_nValue = value;
	pNode->m_pLeft = nullptr;
	pNode->m_pRight = nullptr;
	//pNode->m_pParent = nullptr;

	return pNode;
}

//error 
//void ConnectTreeNodes(BinaryTreeNode* pParent, BinaryTreeNode* pLeft, BinaryTreeNode* pRight)
//{
//	if (pParent != nullptr)
//	{
//		pParent->m_pLeft = pLeft;
//		pParent->m_pRight = pRight;
//	}
//}

void ConnectTreeNodes(BinaryTreeNode* pParent, BinaryTreeNode *pLeft, BinaryTreeNode * pRight)
{
	if (pParent != nullptr) {
		pParent->m_pLeft = pLeft;
		pParent->m_pRight = pRight;
		//if (pLeft != nullptr) pLeft->m_pParent = pParent;
		//if (pRight != nullptr) pRight->m_pParent = pParent;
	}
}
void DestroyTree(BinaryTreeNode* pRoot)
{
	if (pRoot != nullptr)
	{
		BinaryTreeNode* pLeft = pRoot->m_pLeft;
		BinaryTreeNode* pRight = pRoot->m_pRight;

		delete pRoot;
		pRoot = nullptr;

		DestroyTree(pLeft);
		DestroyTree(pRight);
	}
}

void PrintTreeNode(const BinaryTreeNode* pNode) {
	if (pNode != NULL) {
		cout << "value of this node is: " << pNode->m_nValue << endl;
		if (pNode->m_pLeft != NULL)
			cout << "value of its left child is: " << pNode->m_pLeft->m_nValue << endl;
		else cout << "left child is null." << endl;
		if (pNode->m_pRight != NULL)
			cout << "value of its right child is: " << pNode->m_pRight->m_nValue << endl;
		else cout << "right child is null" << endl;
	}
	else cout << "this node is null." << endl;
	cout << endl;
}
/*
PreOrder Print Tree
*/
void PrintTree(const BinaryTreeNode* pRoot) {
	PrintTreeNode(pRoot);
	if (pRoot != NULL) {
		if (pRoot->m_pLeft != NULL)
			PrintTree(pRoot->m_pLeft);
		if (pRoot->m_pRight != NULL)
			PrintTree(pRoot->m_pRight);
	}
}

void PrintDoubleLinkedList(BinaryTreeNode* pHeadOfList)
{
	BinaryTreeNode* pNode = pHeadOfList;

	printf("The nodes from left to right are:\n");
	while (pNode != nullptr)
	{
		printf("%d\t", pNode->m_nValue);

		if (pNode->m_pRight == nullptr)
			break;
		pNode = pNode->m_pRight;
	}

	printf("\nThe nodes from right to left are:\n");
	while (pNode != nullptr)
	{
		printf("%d\t", pNode->m_nValue);

		if (pNode->m_pLeft == nullptr)
			break;
		pNode = pNode->m_pLeft;
	}

	printf("\n");
}

void DestroyList(BinaryTreeNode* pHeadOfList)
{
	BinaryTreeNode* pNode = pHeadOfList;
	while (pNode != nullptr)
	{
		BinaryTreeNode* pNext = pNode->m_pRight;

		delete pNode;
		pNode = pNext;
	}
}
// ====================测试代码====================
void Test(const char* testName, const BinaryTreeNode* pRoot, unsigned int k, bool isNull, int expected)
{
	if (testName != nullptr)
		printf("%s begins: ", testName);

	const BinaryTreeNode* pTarget = KthNode(pRoot, k);
	if ((isNull && pTarget == nullptr) || (!isNull && pTarget->m_nValue == expected))
		printf("Passed.\n");
	else
		printf("FAILED.\n");
}

//            8
//        6      10
//       5 7    9  11
void TestA()
{
	BinaryTreeNode* pNode8 = CreateBinaryTreeNode(8);
	BinaryTreeNode* pNode6 = CreateBinaryTreeNode(6);
	BinaryTreeNode* pNode10 = CreateBinaryTreeNode(10);
	BinaryTreeNode* pNode5 = CreateBinaryTreeNode(5);
	BinaryTreeNode* pNode7 = CreateBinaryTreeNode(7);
	BinaryTreeNode* pNode9 = CreateBinaryTreeNode(9);
	BinaryTreeNode* pNode11 = CreateBinaryTreeNode(11);

	ConnectTreeNodes(pNode8, pNode6, pNode10);
	ConnectTreeNodes(pNode6, pNode5, pNode7);
	ConnectTreeNodes(pNode10, pNode9, pNode11);

	Test("TestA0", pNode8, 0, true, -1);
	Test("TestA1", pNode8, 1, false, 5);
	Test("TestA2", pNode8, 2, false, 6);
	Test("TestA3", pNode8, 3, false, 7);
	Test("TestA4", pNode8, 4, false, 8);
	Test("TestA5", pNode8, 5, false, 9);
	Test("TestA6", pNode8, 6, false, 10);
	Test("TestA7", pNode8, 7, false, 11);
	Test("TestA8", pNode8, 8, true, -1);

	DestroyTree(pNode8);

	printf("\n\n");
}

//               5
//              /
//             4
//            /
//           3
//          /
//         2
//        /
//       1
void TestB()
{
	BinaryTreeNode* pNode5 = CreateBinaryTreeNode(5);
	BinaryTreeNode* pNode4 = CreateBinaryTreeNode(4);
	BinaryTreeNode* pNode3 = CreateBinaryTreeNode(3);
	BinaryTreeNode* pNode2 = CreateBinaryTreeNode(2);
	BinaryTreeNode* pNode1 = CreateBinaryTreeNode(1);

	ConnectTreeNodes(pNode5, pNode4, nullptr);
	ConnectTreeNodes(pNode4, pNode3, nullptr);
	ConnectTreeNodes(pNode3, pNode2, nullptr);
	ConnectTreeNodes(pNode2, pNode1, nullptr);

	Test("TestB0", pNode5, 0, true, -1);
	Test("TestB1", pNode5, 1, false, 1);
	Test("TestB2", pNode5, 2, false, 2);
	Test("TestB3", pNode5, 3, false, 3);
	Test("TestB4", pNode5, 4, false, 4);
	Test("TestB5", pNode5, 5, false, 5);
	Test("TestB6", pNode5, 6, true, -1);

	DestroyTree(pNode5);

	printf("\n\n");
}

// 1
//  \
//   2
//    \
//     3
//      \
//       4
//        \
//         5
void TestC()
{
	BinaryTreeNode* pNode1 = CreateBinaryTreeNode(1);
	BinaryTreeNode* pNode2 = CreateBinaryTreeNode(2);
	BinaryTreeNode* pNode3 = CreateBinaryTreeNode(3);
	BinaryTreeNode* pNode4 = CreateBinaryTreeNode(4);
	BinaryTreeNode* pNode5 = CreateBinaryTreeNode(5);

	ConnectTreeNodes(pNode1, nullptr, pNode2);
	ConnectTreeNodes(pNode2, nullptr, pNode3);
	ConnectTreeNodes(pNode3, nullptr, pNode4);
	ConnectTreeNodes(pNode4, nullptr, pNode5);

	Test("TestC0", pNode1, 0, true, -1);
	Test("TestC1", pNode1, 1, false, 1);
	Test("TestC2", pNode1, 2, false, 2);
	Test("TestC3", pNode1, 3, false, 3);
	Test("TestC4", pNode1, 4, false, 4);
	Test("TestC5", pNode1, 5, false, 5);
	Test("TestC6", pNode1, 6, true, -1);

	DestroyTree(pNode1);

	printf("\n\n");
}

// There is only one node in a tree
void TestD()
{
	BinaryTreeNode* pNode1 = CreateBinaryTreeNode(1);

	Test("TestD0", pNode1, 0, true, -1);
	Test("TestD1", pNode1, 1, false, 1);
	Test("TestD2", pNode1, 2, true, -1);

	DestroyTree(pNode1);

	printf("\n\n");
}

// empty tree
void TestE()
{
	Test("TestE0", nullptr, 0, true, -1);
	Test("TestE1", nullptr, 1, true, -1);

	printf("\n\n");
}

int main(int argc, char* argv[])
{
	TestA();
	TestB();
	TestC();
	TestD();
	TestE();
}
