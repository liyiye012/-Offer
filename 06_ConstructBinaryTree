#include<iostream>
#include"BinaryTree.h"
using namespace std;
//==================================================================
// 《剑指Offer——名企面试官精讲典型编程题》代码
// 作者：何海涛
//==================================================================

// 面试题6：重建二叉树
// 题目：输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输
// 入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,
// 2, 4, 7, 3, 5, 6, 8}和中序遍历序列{4, 7, 2, 1, 5, 3, 8, 6}，则重建出
// 图2.6所示的二叉树并输出它的头结点。
BinaryTreeNode *ConstructCore(int *startpreorder, int *endpreorder, int *startinorder, int *endinorder);

BinaryTreeNode * Construct(int *preorder, int *inorder, int length) {
	if (preorder == NULL || inorder == NULL || length <= 0)
		return NULL;
	return ConstructCore(preorder,preorder+length-1,inorder, inorder+length-1);
}

BinaryTreeNode *ConstructCore(int *startpreorder, int *endpreorder, int *startinorder, int *endinorder) {
	int rootvalue =  startpreorder[0];
	BinaryTreeNode *root = new BinaryTreeNode();
	root->m_nValue = rootvalue;
	cout << "root->m_nValue=" << root->m_nValue << endl;
	root->m_pLeft = root->m_pRight = NULL;
	if (startpreorder == endpreorder) {
		if (startinorder == endinorder && *startpreorder == *startinorder) {
			return root;
		}
		else throw std::exception("Invalid Input.");
	}
	// find the root  in the inorder sequence
	int *rootinorder = startinorder;
	while (rootinorder < endinorder && *rootinorder != rootvalue) {
		rootinorder++;
	}
	// after the loop there are two cases: *rootinorder == rootvalue  or rootinorder don't exit
	if (rootinorder == endinorder && *rootinorder != rootvalue)
		throw std::exception("Invalid Input.");
	int leftlength = rootinorder - startinorder;
	int *leftpreorderend = startpreorder + leftlength;
	if (leftlength > 0) {
		//error : return ConstructCore(startpreorder + 1, leftpreorderend, startinorder, rootinorder - 1);
		root->m_pLeft= ConstructCore(startpreorder + 1, leftpreorderend, startinorder, rootinorder - 1);
	}
	if (leftlength < endinorder - startinorder) {
		// error :return ConstructCore(leftpreorderend + 1, endpreorder, rootinorder + 1, endinorder);
		root->m_pRight= ConstructCore(leftpreorderend + 1, endpreorder, rootinorder + 1, endinorder);
	}

	return root;

}
 
//=====================辅助代码====================

void PrintTreeNode(BinaryTreeNode* pNode) {
	if (pNode != NULL) {
		cout << "value of this node is: " << pNode->m_nValue << endl;
		if (pNode->m_pLeft != NULL)
			cout << "value of its left child is: " << pNode->m_pLeft->m_nValue << endl;
		else cout << "left child is null." << endl;
		if (pNode->m_pRight != NULL)
			cout << "value of its right child is: " << pNode->m_pRight->m_nValue << endl;
		else cout << "right child is null" << endl;
	}
	else cout << "this node is null." << endl;
	cout << endl;
}
/*
	PreOrder Print Tree 
*/
void PrintTree(BinaryTreeNode* pRoot) {
	PrintTreeNode(pRoot);
	if (pRoot != NULL) {
		if (pRoot->m_pLeft != NULL)
			PrintTree(pRoot->m_pLeft);
		if (pRoot->m_pRight != NULL)
			PrintTree(pRoot->m_pRight);
	}
}
void DestroyTree(BinaryTreeNode* pRoot) {
	if (pRoot != NULL) {
		BinaryTreeNode *pLeft = pRoot->m_pLeft;
		BinaryTreeNode *pRight = pRoot->m_pRight;
		delete pRoot;
		pRoot = NULL;
		DestroyTree(pLeft);
		DestroyTree(pRight);
	}
}
// ====================测试代码====================
void Test(char* testName, int* preorder, int* inorder, int length)
{
	if (testName != nullptr)
		printf("%s begins:\n", testName);

	printf("The preorder sequence is: ");
	for (int i = 0; i < length; ++i)
		printf("%d ", preorder[i]);
	printf("\n");

	printf("The inorder sequence is: ");
	for (int i = 0; i < length; ++i)
		printf("%d ", inorder[i]);
	printf("\n");

	try
	{
		BinaryTreeNode* root = Construct(preorder, inorder, length);
		PrintTree(root);

		DestroyTree(root);
	}
	catch (std::exception& exception)
	{
		printf("Invalid Input.\n");
	}
}

// 普通二叉树
//              1
//           /     \
//          2       3  
//         /       / \
//        4       5   6
//         \         /
//          7       8
void Test1()
{
	const int length = 8;
	int preorder[length] = { 1, 2, 4, 7, 3, 5, 6, 8 };
	int inorder[length] = { 4, 7, 2, 1, 5, 3, 8, 6 };

	Test("Test1", preorder, inorder, length);
}

// 所有结点都没有右子结点
//            1
//           / 
//          2   
//         / 
//        3 
//       /
//      4
//     /
//    5
void Test2()
{
	const int length = 5;
	int preorder[length] = { 1, 2, 3, 4, 5 };
	int inorder[length] = { 5, 4, 3, 2, 1 };

	Test("Test2", preorder, inorder, length);
}

// 所有结点都没有左子结点
//            1
//             \ 
//              2   
//               \ 
//                3 
//                 \
//                  4
//                   \
//                    5
void Test3()
{
	const int length = 5;
	int preorder[length] = { 1, 2, 3, 4, 5 };
	int inorder[length] = { 1, 2, 3, 4, 5 };

	Test("Test3", preorder, inorder, length);
}

// 树中只有一个结点
void Test4()
{
	const int length = 1;
	int preorder[length] = { 1 };
	int inorder[length] = { 1 };

	Test("Test4", preorder, inorder, length);
}

// 完全二叉树
//              1
//           /     \
//          2       3  
//         / \     / \
//        4   5   6   7
void Test5()
{
	const int length = 7;
	int preorder[length] = { 1, 2, 4, 5, 3, 6, 7 };
	int inorder[length] = { 4, 2, 5, 1, 6, 3, 7 };

	Test("Test5", preorder, inorder, length);
}

// 输入空指针
void Test6()
{
	Test("Test6", nullptr, nullptr, 0);
}

// 输入的两个序列不匹配
void Test7()
{
	const int length = 7;
	int preorder[length] = { 1, 2, 4, 5, 3, 6, 7 };
	int inorder[length] = { 4, 2, 8, 1, 6, 3, 7 };

	Test("Test7: for unmatched input", preorder, inorder, length);
}
 
void Test8() {
	const int length = 3;
	int preorder[length] = { 1,2,3 };
	int inorder[length] = { 2,1,3 };
	Test("Test8", preorder, inorder, length);
}
int main(int argc, char* argv[])
{
	Test1();
	Test2();
	Test3();
	Test4();
	Test5();
	Test6();
	Test7();
	Test8();
	return 0;
}
